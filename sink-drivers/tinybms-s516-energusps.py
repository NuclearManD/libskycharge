#!/usr/bin/env python3
#
# Copyright 2022 Skycharge GmbH
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met: 1. Redistributions of source code must retain the above
# copyright notice, this list of conditions and the following
# disclaimer.
#
# 2. Redistributions in binary form must reproduce the above
# copyright notice, this list of conditions and the following
# disclaimer in the documentation and/or other materials provided
# with the distribution.
#
# 3. Neither the name of the copyright holder nor the names of its
# contributors may be used to endorse or promote products derived
# from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
# OF THE POSSIBILITY OF SUCH DAMAGE.
#

import sys
import time
import serial
import struct
import subprocess

# MODBUS CRC tables
CRC_HI = [
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
]

CRC_LOW = [
    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04,
    0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8,
    0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
    0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 0x11, 0xD1, 0xD0, 0x10,
    0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
    0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
    0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C,
    0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0,
    0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
    0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
    0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C,
    0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
    0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54,
    0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98,
    0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40
]

RX_TIMEOUT = 1

def crc16(data):
    """
    brief Calculate MODBUS crc
    :param data: Data
    :return: List CRC high Byte, CRC low Byte
    """
    assert type(data) == list

    crc_high = 0xFF
    crc_low = 0xFF

    for i in range(0, len(data)):
        index = crc_high ^ data[i]
        crc_high = crc_low ^ CRC_HI[index]
        crc_low = CRC_LOW[index]

    return [crc_high, crc_low]

def run(command, indata=None):
    process = subprocess.Popen(command,
                               stdin=subprocess.PIPE,
                               stdout=subprocess.PIPE,
                               stderr=subprocess.PIPE)
    if indata and isinstance(indata, list):
        indata = bytearray(indata)
    (out, err) = process.communicate(input=indata)
    process.wait()

    return out

class passthru_port:
    def write(self, data):
        command = [ "skycharge-cli", "sink-passthru-send", "--conffile", "confs/hw2.conf", "directly" ]
        run(command, data)

    def read(self):
        command = [ "skycharge-cli", "sink-passthru-recv", "--conffile", "confs/hw2.conf", "directly" ]
        return run(command)

class bms:
    buf = []

    def __init__(self, port):
        self.port = port

    def read_byte(self, timeout):
        start = time.time()

        while not self.buf and time.time() - start < timeout:
            self.buf = list(self.port.read())

        if not self.buf:
            return None

        return self.buf.pop(0)

    def read_exact(self, size):
        data = []
        for i in range(0, size):
            b = self.read_byte(RX_TIMEOUT)
            if b is None:
                return None
            data += [b]

        return data

    def tuple_with_N_nones(self, fmt):
        nr_entries = len(struct.unpack(fmt, b'\0' * struct.calcsize(fmt)))
        return (None) if nr_entries == 1 else (None,) * nr_entries

    def exec_cmd(self, expected_fmt, cmd):
        fmt = '<BB' + expected_fmt + 'BB'
        cmd = [0xaa] + cmd
        cmd += crc16(cmd)
        self.port.write(cmd)
        data = self.read_exact(2)
        if not data:
            return self.tuple_with_N_nones(expected_fmt)

        if data[1] != cmd[1]:
            # Presumably error, which has 6bytes packet, read the rest
            self.read_exact(4)
            return self.tuple_with_N_nones(expected_fmt)

        size = struct.calcsize(fmt)
        data += self.read_exact(size - 2)

        bdata = bytearray(data)
        *unpacked, crc_lsb, crc_msb = struct.unpack(fmt, bdata)

        if bdata[0] != 0xaa or bdata[1] != cmd[1]:
            return self.tuple_with_N_nones(expected_fmt)

        crc = crc16(list(bdata[:-2]))

        if crc_lsb != crc[0] or crc_msb != crc[1]:
            return self.tuple_with_N_nones(expected_fmt)

        unpacked = unpacked[2:]
        return unpacked[0] if len(unpacked) == 1 else unpacked

    def soc(self):
        fmt = 'I'
        cmd = [0x1a]
        soc = self.exec_cmd(fmt, cmd)
        if not soc:
            return soc
        return soc / 1000000

    def pack_voltage(self):
        fmt = 'f'
        cmd = [0x14]
        return self.exec_cmd(fmt, cmd)

    def pack_current(self):
        fmt = 'f'
        cmd = [0x15]
        return self.exec_cmd(fmt, cmd)

    def bms_settings(self):
        fmt = 'B' + 'H' * 20
        # Fetch first 20 registers
        cmd = [0x1d, 0x04, 0x00, 20]
        pl, *settings = self.exec_cmd(fmt, cmd)
        return settings

    def get_nr_cells_setting(self):
        return self.bms_settings()[7]

    def get_nr_cells_setting2(self):
        fmt = 'B' + 'H' * 20
        # Fetch first 20 registers
        cmd = [0x1d, 0x04, 0x00, 20]
        pl, *settings = self.exec_cmd(fmt, cmd)
        return settings

        
        return self.bms_settings()[7]


    def cells_voltages(self):
        nr_cells = self.get_nr_cells_setting()
        if not nr_cells:
            return None
        fmt = 'B' + 'H' * nr_cells
        cmd = [0x1c]
        pl, *voltages = self.exec_cmd(fmt, cmd)
        return [v / 10000 for v in voltages] if voltages else None

port = serial.Serial('/dev/ttyUSB0', 115200, timeout=0)
#port = passthru_port()
bms = bms(port)

while True:
    time.sleep(0.5)
    soc = bms.soc()
    if not soc:
        continue

    cells_v = bms.cells_voltages()
    v = bms.pack_voltage()
    i = bms.pack_current()

    print("    SoC:  %.2f%% " % soc)
    print("      I:  %.2fA " % i)
    print("      V:  %.2fV " % v)
    print("Sells V:  [%s]" % (", ".join(["%.2fV" % v for v in cells_v])))
    print("")




####

port = serial.Serial('/dev/ttyUSB0', 115200, timeout=0)
soc_cmd = [0xAA, 0x1A]
soc_cmd += crc(soc_cmd)

# Wake up
port.write(soc_cmd)
time.sleep(0.5)

port.write(soc_cmd)

data = []
while True:
    b = port.read()
    data += b
    if not b and data:
        print(bytearray(data).hex(' '))
        header, soc, crcsumm = struct.unpack_from('<HIH', bytearray(data), 0)
        print("%.2f\n" % (soc / 1000000.0))
        data = []
        port.write(soc_cmd)
